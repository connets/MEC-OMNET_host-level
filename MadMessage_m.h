//
// Generated file, do not edit! Created by nedtool 5.6 from MadMessage.msg.
//

#ifndef __MADMESSAGE_M_H
#define __MADMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
  typedef omnetpp::cGate *GatePtr;
  typedef omnetpp::cMessage *MessagePtr;
// }}

/**
 * Class generated from <tt>MadMessage.msg:25</tt> by nedtool.
 * <pre>
 * message MadMessage
 * {
 *     GatePtr outGate;
 *     MessagePtr msg;
 * }
 * </pre>
 */
class MadMessage : public ::omnetpp::cMessage
{
  protected:
    GatePtr outGate;
    MessagePtr msg;

  private:
    void copy(const MadMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MadMessage&);

  public:
    MadMessage(const char *name=nullptr, short kind=0);
    MadMessage(const MadMessage& other);
    virtual ~MadMessage();
    MadMessage& operator=(const MadMessage& other);
    virtual MadMessage *dup() const override {return new MadMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual GatePtr& getOutGate();
    virtual const GatePtr& getOutGate() const {return const_cast<MadMessage*>(this)->getOutGate();}
    virtual void setOutGate(const GatePtr& outGate);
    virtual MessagePtr& getMsg();
    virtual const MessagePtr& getMsg() const {return const_cast<MadMessage*>(this)->getMsg();}
    virtual void setMsg(const MessagePtr& msg);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MadMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MadMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MADMESSAGE_M_H

